//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerAPI.Classes
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    using System.IO;
    using TurkmenBuildProjectServer.Classes;

    public partial class Project
    {
        public int Id { get; set; }
        public string ProjectType { get; set; }
        public double ProjectPrice { get; set; }
        public double ProjectArea { get; set; }
        public string Information { get; set; }
        public string Picture { get; set; }
        public bool Foundation { get; set; }
    
        public virtual Order Order { get; set; }

        public Project(string Type, string Information, double Price, double Area, bool Foundation)
        {
            this.ProjectType = Type;
            this.Information = Information;
            this.ProjectPrice = Price;
            this.ProjectArea = Area;
            this.Foundation = Foundation;
            this.Picture = @"\pictures\projects\chertezh-doma.jpg";
        }
        public Project(string Type, string Information, string Picture, double Price, double Area, bool Foundation)
        {
            this.ProjectType = Type;
            this.Information = Information;
            this.ProjectPrice = Price;
            this.ProjectArea = Area;
            this.Foundation = Foundation;
            this.Picture = Picture;
        }

        public Project() { }

        public string ToJson()
        {
            Image ProjectImage = Image.FromFile(this.Picture);
            byte[] ProjectImageArray = ByteConverter.ConvertToByteArray(ProjectImage);

            return JsonConvert.SerializeObject(new Dictionary<string, object>()
            {
                { "Id", this.Id },
                { "ProjectType", this.ProjectType},
                { "ProjectPrice", this.ProjectPrice },
                { "ProjectArea", this.ProjectArea },
                { "Foundation", this.Foundation },
                { "Information", this.Information },
                { "Picture", Convert.ToBase64String(ProjectImageArray) },
                { "Order", this.Order != null ? new Dictionary<string, object>() { { "Id", this.Order.Id} } : null }
            });
        }
    }
}
